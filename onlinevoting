import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.security.MessageDigest;
import java.util.HashMap;
import java.util.Map;

public class OnlineVotingSystem {

    // Store candidate votes in a map
    private static Map<String, Integer> candidatesVotes = new HashMap<>();
    private static final String[] candidates = {"Candidate C", "Candidate B", "Candidate A"};
    
    // Store valid voter credentials (hashed passwords)
    private static final Map<String, String> voters = new HashMap<>();
    private static final Map<String, Boolean> hasVoted = new HashMap<>(); // Track if a voter has already voted
    
    static {
        // Initializing sample voters with Voter ID and hashed password
        voters.put("voter1", hashPassword("password1"));
        voters.put("voter2", hashPassword("password2"));
        voters.put("voter3", hashPassword("password3"));
        
        // Initialize candidates' votes to 0
        for (String candidate : candidates) {
            candidatesVotes.put(candidate, 0);
        }
    }

    public static void main(String[] args) {
        // Setting up the main frame
        JFrame frame = new JFrame("Online Voting System");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // Create a card layout to switch between different panels
        CardLayout cardLayout = new CardLayout();
        JPanel mainPanel = new JPanel(cardLayout);
        
        // Create login panel
        JPanel loginPanel = createLoginPanel(cardLayout, mainPanel);
        mainPanel.add(loginPanel, "Login");

        // Create voting panel
        JPanel votingPanel = createVotingPanel(cardLayout, mainPanel);
        mainPanel.add(votingPanel, "Vote");

        // Create results panel
        JPanel resultsPanel = createResultsPanel();
        mainPanel.add(resultsPanel, "Results");

        // Set the initial view to the login panel
        frame.add(mainPanel);
        frame.setVisible(true);
    }

    // Creates the login panel
    private static JPanel createLoginPanel(CardLayout cardLayout, JPanel mainPanel) {
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayout(3, 2));

        JLabel voterIdLabel = new JLabel("Enter Voter ID: ");
        JTextField voterIdField = new JTextField();
        JLabel passwordLabel = new JLabel("Enter Password: ");
        JPasswordField passwordField = new JPasswordField();
        
        JButton loginButton = new JButton("Login");
        
        // Action listener for login button
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String voterId = voterIdField.getText();
                String password = new String(passwordField.getPassword());

                if (voters.containsKey(voterId) && voters.get(voterId).equals(hashPassword(password))) {
                    if (hasVoted.getOrDefault(voterId, false)) {
                        JOptionPane.showMessageDialog(loginPanel, "You have already voted.");
                    } else {
                        JOptionPane.showMessageDialog(loginPanel, "Login successful!");
                        cardLayout.show(mainPanel, "Vote");
                    }
                } else {
                    JOptionPane.showMessageDialog(loginPanel, "Invalid Voter ID or Password.");
                }
            }
        });

        loginPanel.add(voterIdLabel);
        loginPanel.add(voterIdField);
        loginPanel.add(passwordLabel);
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);

        return loginPanel;
    }

    // Creates the voting panel
    private static JPanel createVotingPanel(CardLayout cardLayout, JPanel mainPanel) {
        JPanel votingPanel = new JPanel();
        votingPanel.setLayout(new BoxLayout(votingPanel, BoxLayout.Y_AXIS));

        JLabel candidatesLabel = new JLabel("Candidates: ");
        for (String candidate : candidates) {
            candidatesLabel.setText(candidatesLabel.getText() + candidate + ", ");
        }

        JLabel voteLabel = new JLabel("Enter your vote (Candidate Name): ");
        JTextField voteField = new JTextField();
        
        JButton voteButton = new JButton("Cast Vote");
        
        // Action listener for vote button
        voteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String vote = voteField.getText().trim();
                String voterId = voteField.getText().trim();  // assuming voterId is unique
                if (candidatesVotes.containsKey(vote) && !hasVoted.getOrDefault(voterId, false)) {
                    candidatesVotes.put(vote, candidatesVotes.get(vote) + 1);
                    hasVoted.put(voterId, true);  // Mark as voted
                    JOptionPane.showMessageDialog(votingPanel, "Your vote has been cast successfully!");

                    // Ask if the voter wants to see the results
                    int response = JOptionPane.showConfirmDialog(votingPanel, "Would you like to see the results?", 
                            "Election Results", JOptionPane.YES_NO_OPTION);
                    if (response == JOptionPane.YES_OPTION) {
                        cardLayout.show(mainPanel, "Results");
                    }
                } else {
                    JOptionPane.showMessageDialog(votingPanel, "Invalid candidate name or you have already voted.");
                }
            }
        });

        votingPanel.add(candidatesLabel);
        votingPanel.add(voteLabel);
        votingPanel.add(voteField);
        votingPanel.add(voteButton);

        return votingPanel;
    }

    // Creates the results panel
    private static JPanel createResultsPanel() {
        JPanel resultsPanel = new JPanel();
        resultsPanel.setLayout(new BoxLayout(resultsPanel, BoxLayout.Y_AXIS));

        // Displaying election results
        JButton resultsButton = new JButton("Show Results");
        resultsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                StringBuilder results = new StringBuilder("<html><h3>Election Results:</h3>");
                for (String candidate : candidates) {
                    results.append(candidate).append(": ").append(candidatesVotes.get(candidate)).append(" votes<br>");
                }
                results.append("</html>");
                JOptionPane.showMessageDialog(resultsPanel, results.toString());
            }
        });

        resultsPanel.add(resultsButton);
        return resultsPanel;
    }

    // Hash the password using SHA-256
    private static String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hashBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException("Error hashing password", e);
        }
    }
}
